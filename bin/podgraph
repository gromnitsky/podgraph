#!/usr/bin/env ruby19
# -*- ruby -*-

require_relative '../lib/podgraph/posterous'

$conf = {}
u = Trestle.new $conf

$conf[:send?] = true
$conf[:mailconfig] = 'config.yaml'
$conf[:modes] = %w(related mixed)
$conf[:mode] = 'related'
$conf[:to] = nil
$conf[:from] = nil
$conf[:banner] = "#{File.basename($0)} [options] file.html\nType 'ri #{Podgraph::Meta::NAME.capitalize}' for the help."

def mailconfig_load()
  begin
    myconf = YAML.load_file($conf[:mailconfig])
  rescue
    abort("cannot parse #{$conf[:mailconfig]} in the current directory")
  end
  %w(to from).each { |i|
    Trestle.errx(1, "missing #{i} in #{$conf[:mailconfig]}") if ! myconf.key?(i.to_sym)
  }
  $conf.merge!(myconf)
end


# ---

u.config_parse(['foobar']) {|src|
  o = u.cl_parse(src) # create an OptionParser object
  o.on('-c ARG', "Use another configuration file instead of",
       $conf[:mailconfig]) { |v| $conf[:mailconfig] = v }
  o.on('-S', "Don't send, just dump the mail to stdout") { |v| $conf[:send?] = false }
  o.on('-m ARG', "Select mode: #{$conf[:modes].join(', ')}") { |v| $conf[:mode] = v }
  u.cl_parse(src, o) # run cl parser
}

Trestle.errx(1, "1 parameter required") unless ARGV.size >= 1
mailconfig_load

begin
  p = Podgraph::Posterous.new(u, ARGV[0], $conf[:to], $conf[:from], $conf[:mode])
  u.veputs(2, "o: #{p.o}".to_s.encode('koi8-u'))
  mail = p.generate
rescue
  Trestle.errx(1, "HTML parsing failed: #{$!}")
end

if ! $conf[:send?]
  puts mail.to_s
  exit 0
end

begin
  mail.delivery_method :sendmail
  mail.deliver
rescue
  Trestle.errx(1, "cannot send mail: #{$!}")
end
